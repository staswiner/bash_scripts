#!/bin/bash

#set -x
source ./logger

_add_option()
{
	local option=$1
	local current="${COMP_WORDS[COMP_CWORD]}";
	local previous="${COMP_WORDS[COMP_CWORD-1]}";
	COMPREPLY+=($(compgen -W "$option" -- $current))
}

_add_multi_option()
{
	local option=$1; shift;
	local answers="$@"; 
	local current="${COMP_WORDS[COMP_CWORD]}";
	local previous="${COMP_WORDS[COMP_CWORD-1]}";
	if [[ $previous = $option ]]; then
		COMPREPLY=($(compgen -W "$answers" -- $current))
		return 1;
	fi
	COMPREPLY+=($(compgen -W "$option" -- $current))
}

_parse_options_from_file()
{
	completionDataFile=$1
	cat ./$completionDataFile | sed 's@.*_add_multi_option.*@&\n\[\[ \$\? \= 1 \]\] \&\& return 0@'
}

_generate_file()
{
	completionDataFile=$1
	completionFile=$2
	cat << EOF > $completionFile
#!/bin/bash
`declare -f _add_option`

`declare -f _add_multi_option`

_compose_options()
{
	COMPREPLY=();
	local current="\${COMP_WORDS[COMP_CWORD]}";
	`_parse_options_from_file $completionDataFile`
}

complete -F _compose_options ./script.sh
EOF

}

usage() {
	echo "usage $0: [completion_data_file] optional:[target_completion_file]"
}

main() {
	if [ -z $1 ]; then
		usage
		exit 1
	fi
	completionDataFile=$1
	completionFile=${2:-completion.bash}

	_generate_file $completionDataFile $completionFile
}

main $@
